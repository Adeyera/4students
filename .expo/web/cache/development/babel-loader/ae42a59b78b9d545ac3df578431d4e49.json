{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/saraliu/Downloads/4students/4students/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as ImageManipulator from 'expo-image-manipulator';\n\nvar openImagePickerAsync = function openImagePickerAsync() {\n  var permissionResult, pickerResult;\n  return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n        case 2:\n          permissionResult = _context.sent;\n\n          if (!(permissionResult.granted === false)) {\n            _context.next = 6;\n            break;\n          }\n\n          alert(\"Permission to access camera roll is required!\");\n          return _context.abrupt(\"return\");\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n        case 8:\n          pickerResult = _context.sent;\n\n          if (pickerResult.cancelled === false) {\n            setSelectedImage(pickerResult.uri);\n          } else {\n            alert(\"Upload a picture please\");\n          }\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar rotate = function rotate() {\n  var manipResult;\n  return _regeneratorRuntime.async(function rotate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ImageManipulator.manipulateAsync(selectedImage, [{\n            flip: \"\"\n          }, {\n            flip: ImageManipulator.FlipType.Vertical\n          }], {\n            compress: 1,\n            format: ImageManipulator.SaveFormat.PNG\n          }));\n\n        case 2:\n          manipResult = _context2.sent;\n          setSelectedImage(maniResult.uri);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function App() {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, selectedImage == \"\" ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#eeb585'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, \"Upload a picture\"))) : React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: selectedImage\n    },\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: rotate,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"#eeb585\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Rotate image\")))), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {}\n});","map":{"version":3,"sources":["/Users/saraliu/Downloads/4students/4students/App.js"],"names":["StatusBar","React","ImagePicker","ImageManipulator","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","setSelectedImage","uri","rotate","manipulateAsync","selectedImage","flip","FlipType","Vertical","compress","format","SaveFormat","PNG","manipResult","maniResult","App","useState","styles","container","button","color","alignItems","image","StyleSheet","create","flex","backgroundColor","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n\nimport * as ImagePicker from 'expo-image-picker';\nimport * as ImageManipulator from 'expo-image-manipulator';\n\nlet openImagePickerAsync = async () => {\n  let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\n\n  if(permissionResult.granted === false){\n    alert(\"Permission to access camera roll is required!\");\n    return;\n  }\n\n  let pickerResult = await ImagePicker.launchImageLibraryAsync();\n\n  if(pickerResult.cancelled === false){\n    setSelectedImage(pickerResult.uri);\n  } else {\n    alert(\"Upload a picture please\")\n  }\n}\n\nlet rotate = async () => {\n  const manipResult = await ImageManipulator.manipulateAsync(\n    selectedImage,\n    [{ flip : \"\"}, { flip : ImageManipulator.FlipType.Vertical }],\n    { compress : 1, format: ImageManipulator.SaveFormat.PNG}\n  );\n  setSelectedImage(maniResult.uri);\n}\n\nexport default function App() {\n  const [selectedImage, setSelectedImage] = React.useState(\"\");\n  return (\n    <View style={styles.container}>\n      { (selectedImage == \"\") ? \n      (\n        <View>\n          <TouchableOpacity\n            onPress={openImagePickerAsync}\n            style={styles.button}>\n              <Text style={{color: '#eeb585'}}>Upload a picture</Text>\n          </TouchableOpacity>\n        </View>\n      ) :\n      (\n        <View style={{alignItems:\"center\"}}> \n          <Image\n            source={{ uri:selectedImage }}\n            style={styles.image}\n            >\n              <TouchableOpacity\n                onPress={rotate}\n                style={styles.button}\n              >\n                <Text style={{color:\"#eeb585\"}}>Rotate image</Text>\n\n              </TouchableOpacity>\n\n          </Image>\n\n        </View>\n      )}\n\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    \n  }\n});\n"]},"metadata":{},"sourceType":"module"}